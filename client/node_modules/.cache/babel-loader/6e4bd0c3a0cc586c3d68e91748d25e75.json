{"ast":null,"code":"var _jsxFileName = \"/Users/ceciliapasquale/Documents/ClassActivities/Project3/client/src/components/Map/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from 'react-geocode';\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_KEY);\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      if (addressArray) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n            city = addressArray[i].long_name;\n            return city;\n          }\n        }\n      } else {\n        console.log('No city found');\n        return city;\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      if (addressArray) {\n        for (let i = 0; i < addressArray[i]; i++) {\n          if (addressArray[i].types[0]) {\n            for (let j = 0; j < addressArray[i].types.length; j++) {\n              if ('sublocality_level_1' === addressArray[i].types || 'locality' === addressArray[i].types[j]) {\n                area = addressArray[i].long_name;\n                return area;\n              }\n            }\n          }\n        }\n      } else {\n        console.log('No area found');\n        return area;\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      if (addressArray) {\n        for (let i = 0; i < addressArray[i]; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      } else {\n        console.log('No state found');\n        return state;\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClos = event => {};\n\n    this.onPlaceSelected = place => {\n      console.log(place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      var latValue = this.props.center.lat;\n      var lngValue = this.props.center.lng;\n\n      if (place.geometry) {\n        latValue = place.geometry.location.lat();\n        lngValue = place.geometry.location.lng();\n      }\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng, addressArray).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng // lat: 0,\n        // lng: 0\n\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng // lat: 0,\n        // lng: 0\n\n      }\n    };\n  }\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.result[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center === nextProps.center.lat) {\n      return false;\n    }\n  }\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottome: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dupont Circle',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAHruTXgtljtftWHl2-fL1ab6S4TE7nZ4U&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n/** \n * How to use\nclass NewCompo extends Component {\n    render() {\n      return(\n          <Map\n       google={this.props.google}\n       center={{lat: 18.5204, lng: 73.8567}}\n       height='300px'\n       zoom={15}\n      />\n        )\n    }\n  }\n  */\n\n\nexport default Map;","map":{"version":3,"sources":["/Users/ceciliapasquale/Documents/ClassActivities/Project3/client/src/components/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","process","env","REACT_APP_GOOGLE_KEY","enableDebug","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","console","log","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClos","onPlaceSelected","place","address","formatted_address","address_components","latValue","center","lat","lngValue","lng","geometry","location","markerPosition","mapPosition","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","componentDidMount","result","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottome","onInfoWindowClose","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker} from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from 'react-geocode';\n\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_KEY);\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            address: '',\n            city: '',\n            area: '',\n            state: '',\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n                // lat: 0,\n                // lng: 0\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n                // lat: 0,\n                // lng: 0\n            }\n        }\n    }\n    componentDidMount() {\n        Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng\n            ).then(\n                response => {\n                    const address = response.results[0].formatted_address,\n                   addressArray = response.result[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                    console.log('city', city, area, state);\n                    this.setState({\n                        address: (address) ? address: '',\n                        area: (area) ? area: '',\n                        city: (city) ? city: '',\n                        state: (state) ? state: '',\n                    })\n                },\n                error => {\n                    console.error(error);\n                }\n            );\n    };\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if( this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city ||\n            this.state.area !== nextState.area ||\n            this.state.state !== nextState.state\n        ) {\n            return true;\n        } else if (this.props.center === nextProps.center.lat){\n            return false;\n        }\n    }\n    getCity = (addressArray) => {\n        let city = '';\n        if(addressArray) {\n            for (let i=0; i<addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                    city = addressArray[i].long_name;\n                    return city;\n                }\n            }\n        } else {\n            console.log('No city found');\n            return city;\n        }\n    };\n\n    getArea = (addressArray) => {\n        let area = '';\n        if(addressArray) {\n            for (let i=0; i<addressArray[i]; i++) {\n                if (addressArray[i].types[0]) {\n                    for (let j=0; j<addressArray[i].types.length; j++){\n                        if ('sublocality_level_1' === addressArray[i].types ||\n                        'locality' === addressArray[i].types[j]) {\n                            area = addressArray[i].long_name;\n                            return area;\n                        }\n                    }\n                }\n            }\n        } else {\n            console.log('No area found');\n            return area;\n        }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        if(addressArray) {\n            for (let i=0; i<addressArray[i]; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' \n                === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        } else {\n            console.log('No state found');\n            return state;\n        }\n    };\n    \n    onChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value});\n    };\n\n    onInfoWindowClos = (event) => {\n\n    };\n\n    onPlaceSelected = (place) => {\n        console.log(place);\n        const address = place.formatted_address,\n        addressArray = place.address_components,\n        city = this.getCity(addressArray),\n        area = this.getArea(addressArray),\n        state = this.getState( addressArray );\n\n        var latValue = this.props.center.lat;\n        var lngValue =  this.props.center.lng;\n        if(place.geometry) {\n            latValue = place.geometry.location.lat();\n            lngValue = place.geometry.location.lng();\n        }\n\n        this.setState({\n            address: (address) ? address: '',\n            area: (area) ? area: '',\n            city: (city) ? city: '',\n            state: (state) ? state: '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n    onMarkerDragEnd = (event) => {\n        console.log('event', event);\n        let newLat = event.latLng.lat(),\n        newLng = event.latLng.lng(),\n        addressArray = [];\n    \n        Geocode.fromLatLng (newLat,newLng, addressArray).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                addressArray = response.results[0].address_components,\n                city = this.getCity(addressArray),\n                area = this.getArea(addressArray),\n                state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address: '',\n                    area: ( area ) ? area : '',\n                    city: (city) ? city: '',\n                    state: (state) ? state: ''\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n\n    render() {\n        const AsyncMap = withScriptjs (\n            withGoogleMap(\n                props => (\n                    <GoogleMap \n                        google = {this.props.google}\n                        defaultZoom = {this.props.zoom}\n                        defaultCenter = {{ lat: this.state.mapPosition.lat, \n                            lng: this.state.mapPosition.lng}}\n                            >\n                        <Autocomplete\n                            style = {{\n                                width: '100%',\n                                height: '40px',\n                                paddingLeft: '16px',\n                                marginTop: '2px',\n                                marginBottome: '100px'\n                            }}\n                            onPlaceSelected = {this.onPlaceSelected}\n                            types = {['(regions)']}\n                            />\n                        <Marker google={this.props.google}\n                            name={'Dupont Circle'}\n                                draggable = {true}\n                                onDragEnd = {this.onMarkerDragEnd}\n                                position = {{lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng}}\n                        />\n                        <InfoWindow\n                            onClose = {this.onInfoWindowClose}\n                            position = {{lat:(this.state.markerPosition.lat + 0.0018), \n                            lng: this.state.markerPosition.lng}}\n                            >\n                            <div>\n                            <span style= {{ padding: 0, margin: 0}}>{this.state.address}</span>\n                             </div>\n                            </InfoWindow>\n\n                    </GoogleMap>\n                )\n            )\n        );\n\n        let map;\n            if (this.props.center.lat !== undefined) {\n                map = <div>\n                <div>\n                    <div className=\"formGroup\">\n                        <label htmlFor=''>City</label>\n                        <input type=\"text\" name=\"city\" className=\"controlForm\" onChange={\n                            this.onChange} readOnly=\"readOnly\" value={this.state.city}/>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label htmlFor=''>Area</label>\n                        <input type=\"text\" name=\"area\" className=\"controlForm\" onChange={\n                            this.onChange} readOnly=\"readOnly\" value={this.state.area}/>\n                     </div>\n                     <div className=\"formGroup\">\n                        <label htmlFor=''>State</label>\n                        <input type=\"text\" name=\"state\" className=\"controlForm\" onChange={\n                            this.onChange} readOnly=\"readOnly\" value={this.state.state}/>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label htmlFor=''>Address</label>\n                        <input type=\"text\" name=\"address\" className=\"controlForm\" onChange={\n                            this.onChange} readOnly=\"readOnly\" value={this.state.address}/>\n                     </div>\n                </div>\n                    <AsyncMap\n                        googleMapURL = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAHruTXgtljtftWHl2-fL1ab6S4TE7nZ4U&libraries=places\"\n                        loadingElement = {\n                            <div style = {{height: '100%'}}/>\n                        }\n                        containerElement = {\n                            <div style = {{height: this.props.height}}/>\n                        }\n                        mapElement={\n                            <div style = {{height: '100%'}}/>\n                        }\n                    />\n                </div> \n            } else { \n                map = <div style = {{height:this.props.height}}/>\n            }\n            return (map)\n    }\n}\n\n/** \n * How to use\nclass NewCompo extends Component {\n    render() {\n      return(\n          <Map\n       google={this.props.google}\n       center={{lat: 18.5204, lng: 73.8567}}\n       height='300px'\n       zoom={15}\n      />\n        )\n    }\n  }\n  */\nexport default Map"]},"metadata":{},"sourceType":"module"}