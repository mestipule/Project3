{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mesti\\\\Documents\\\\ClassGit\\\\Project3\\\\client\\\\src\\\\App.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from 'react-geocode';\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_KEY);\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray[i]; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types || locality === addressArray[i][j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray[i]; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClos = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            city = this.getCity(address),\n            area = this.getArea(address),\n            state = this.getState(address),\n            latValue = this.geometry.location.lat(),\n            lngValue = this.geometry.location.lng();\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.result[0].address.components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.marerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.propss.center === nextProps.center.lat) {\n      return false;\n    }\n  }\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: '100%',\n        height: '40px',\n        paddingLeft: '16px',\n        marginTop: '2px',\n        marginBottome: '100px'\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: ['(regions)'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: 'Dupont Circle',\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPostion.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"lable\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"lable\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"lable\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"formGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"lable\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"controlForm\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        GoogleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\" + process.env.REACT_APP_GOOGLE_KEY + \"&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n/** \r\n * How to use\r\nclass NewCompo extends Component {\r\n    render() {\r\n      return(\r\n          <Map\r\n       google={this.props.google}\r\n       center={{lat: 18.5204, lng: 73.8567}}\r\n       height='300px'\r\n       zoom={15}\r\n      />\r\n        )\r\n    }\r\n  }\r\n  */\n\n\nexport default Map;","map":{"version":3,"sources":["C:\\Users\\mesti\\Documents\\ClassGit\\Project3\\client\\src\\App.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","process","env","REACT_APP_GOOGLE_KEY","enableDebug","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","locality","getState","state","onChange","event","setState","target","name","value","onInfoWindowClos","onPlaceSelected","place","address","formatted_address","latValue","geometry","location","lat","lngValue","lng","markerPosition","onMarkerDragEnd","console","log","newLat","latLng","newLng","fromLatLng","then","response","results","address_components","error","mapPosition","center","componentDidMount","result","components","shouldComponentUpdate","nextProps","nextState","marerPosition","propss","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottome","markerPostion","onInfoWindowClose","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker} from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from 'react-geocode';\r\n\r\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_KEY);\r\nGeocode.enableDebug();\r\n\r\nclass Map extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            address: '',\r\n            city: '',\r\n            area: '',\r\n            state: '',\r\n            mapPosition: {\r\n                lat: this.props.center.lat,\r\n                lng: this.props.center.lng\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng\r\n            ).then(\r\n                response => {\r\n                    const address = response.results[0].formatted_address,\r\n                    addressArray = response.result[0].address.components,\r\n                    city = this.getCity(addressArray),\r\n                    area = this.getArea(addressArray),\r\n                    state = this.getState(addressArray);\r\n                    console.log('city', city, area, state);\r\n                    this.setState({\r\n                        address: (address) ? address: '',\r\n                        area: (area) ? area: '',\r\n                        city: (city) ? city: '',\r\n                        state: (state) ? state: '',\r\n                    })\r\n                },\r\n                error => {\r\n                    console.error(error);\r\n                }\r\n            );\r\n    };\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(\r\n            this.state.marerPosition.lat !== this.props.center.lat ||\r\n            this.state.address !== nextState.address ||\r\n            this.state.city !== nextState.city ||\r\n            this.state.area !== nextState.area ||\r\n            this.state.state !== nextState.state\r\n        ) {\r\n            return true;\r\n        } else if (this.propss.center === nextProps.center.lat){\r\n            return false;\r\n        }\r\n    }\r\n    getCity = (addressArray) => {\r\n        let city = '';\r\n        for (let i=0; i<addressArray.length; i++) {\r\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n                city = addressArray[i].long_name;\r\n                return city;\r\n            }\r\n        }\r\n    };\r\n\r\n    getArea = (addressArray) => {\r\n        let area = '';\r\n        for (let i=0; i<addressArray[i]; i++) {\r\n            if (addressArray[i].types[0]) {\r\n                for (let j=0; j<addressArray[i].types.length; j++){\r\n                    if ('sublocality_level_1' === addressArray[i].types ||\r\n                    locality === addressArray[i][j]) {\r\n                        area = addressArray[i].long_name;\r\n                        return area;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    getState = (addressArray) => {\r\n        let state = '';\r\n        for (let i=0; i<addressArray[i]; i++) {\r\n           if (addressArray[i].types[0] && 'administrative_area_level_1' \r\n           === addressArray[i].types[0]) {\r\n               state = addressArray[i].long_name;\r\n               return state;\r\n           }\r\n        }\r\n    };\r\n    \r\n    onChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value});\r\n    };\r\n\r\n    onInfoWindowClos = (event) => {\r\n\r\n    };\r\n\r\n    onPlaceSelected = (place) => {\r\n        const address = place.formatted_address,\r\n        city = this.getCity(address),\r\n        area = this.getArea(address),\r\n        state = this.getState(address),\r\n        latValue = this.geometry.location.lat(),\r\n        lngValue = this.geometry.location.lng();\r\n\r\n        this.setState({\r\n            address: (address) ? address: '',\r\n            area: (area) ? area: '',\r\n            city: (city) ? city: '',\r\n            state: (state) ? state: '',\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    };\r\n\r\n    onMarkerDragEnd = (event) => {\r\n        console.log('event', event);\r\n        let newLat = event.latLng.lat(),\r\n        newLng = event.latLng.lng(),\r\n        addressArray = [];\r\n    \r\n        Geocode.fromLatLng (newLat,newLng).then(\r\n            response => {\r\n                const address = response.results[0].formatted_address,\r\n                addressArray = response.results[0].address_components,\r\n                city = this.getCity(addressArray),\r\n                area = this.getArea(addressArray),\r\n                state = this.getState(addressArray);\r\n                this.setState({\r\n                    address: (address) ? address: '',\r\n                    area: (area) ? area: '',\r\n                    city: (city) ? city: '',\r\n                    state: (state) ? state: ''\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const AsyncMap = withScriptjs (\r\n            withGoogleMap(\r\n                props => (\r\n                    <GoogleMap google = {this.props.google}\r\n                        defaultZoom = {this.props.zoom}\r\n                        defaultCenter = {{ lat: this.state.mapPosition.lat, \r\n                            lng: this.state.mapPosition.lng}}\r\n                            >\r\n                        <Autocomplete\r\n                            style = {{\r\n                                width: '100%',\r\n                                height: '40px',\r\n                                paddingLeft: '16px',\r\n                                marginTop: '2px',\r\n                                marginBottome: '100px'\r\n                            }}\r\n                            onPlaceSelected = {this.onPlaceSelected}\r\n                            types = {['(regions)']}\r\n                            />\r\n                        <Marker google={this.props.google}\r\n                            name={'Dupont Circle'}\r\n                                draggable = {true}\r\n                                onDragEnd = {this.onMarkerDragEnd}\r\n                                position = {{lat: this.state.markerPosition.lat, lng: this.state.markerPostion.lng}}\r\n                        />\r\n                        <InfoWindow\r\n                            onClose = {this.onInfoWindowClose}\r\n                            position = {{lat:(this.state.markerPosition.lat + 0.0018), \r\n                            lng: this.state.markerPosition.lng}}\r\n                            >\r\n                            <div>\r\n                            <span style= {{ padding: 0, margin: 0}}>{this.state.address}</span>\r\n                        </div>\r\n                            </InfoWindow>\r\n\r\n                    </GoogleMap>\r\n                )\r\n            )\r\n        );\r\n\r\n        let map;\r\n            if (this.props.center.lat !== undefined) {\r\n                map = <div>\r\n                <div>\r\n                    <div className=\"formGroup\">\r\n                        <lable htmlFor=''>City</lable>\r\n                        <input type=\"text\" name=\"city\" className=\"controlForm\" onChange={\r\n                            this.onChange} readOnly=\"readOnly\" value={this.state.city}/>\r\n                    </div>\r\n                    <div className=\"formGroup\">\r\n                        <lable htmlFor=''>Area</lable>\r\n                        <input type=\"text\" name=\"area\" className=\"controlForm\" onChange={\r\n                            this.onChange} readOnly=\"readOnly\" value={this.state.area}/>\r\n                     </div>\r\n                     <div className=\"formGroup\">\r\n                        <lable htmlFor=''>State</lable>\r\n                        <input type=\"text\" name=\"state\" className=\"controlForm\" onChange={\r\n                            this.onChange} readOnly=\"readOnly\" value={this.state.state}/>\r\n                    </div>\r\n                    <div className=\"formGroup\">\r\n                        <lable htmlFor=''>Address</lable>\r\n                        <input type=\"text\" name=\"address\" className=\"controlForm\" onChange={\r\n                            this.onChange} readOnly=\"readOnly\" value={this.state.address}/>\r\n                     </div>\r\n                </div>\r\n                    <AsyncMap\r\n                        GoogleMapURL = {\"https://maps.googleapis.com/maps/api/js?key=\"+process.env.REACT_APP_GOOGLE_KEY+\"&libraries=places\"}\r\n                        loadingElement = {\r\n                            <div style = {{height: '100%'}}/>\r\n                        }\r\n                        containerElement = {\r\n                            <div style = {{height: this.props.height}}/>\r\n                        }\r\n                        mapElement={\r\n                            <div style = {{height: '100%'}}/>\r\n                        }\r\n                    />\r\n                </div> \r\n            } else { \r\n                map = <div style = {{height:this.props.height}}/>\r\n            }\r\n            return (map)\r\n    }\r\n}\r\n\r\n/** \r\n * How to use\r\nclass NewCompo extends Component {\r\n    render() {\r\n      return(\r\n          <Map\r\n       google={this.props.google}\r\n       center={{lat: 18.5204, lng: 73.8567}}\r\n       height='300px'\r\n       zoom={15}\r\n      />\r\n        )\r\n    }\r\n  }\r\n  */\r\nexport default Map"]},"metadata":{},"sourceType":"module"}